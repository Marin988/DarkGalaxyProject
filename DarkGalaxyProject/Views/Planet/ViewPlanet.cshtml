@using Microsoft.AspNetCore.Identity
@using DarkGalaxyProject.Services.PlanetServices.Models
@model PlanetServiceModel
@inject UserManager<Player> UserManager

@{
    ViewData["Title"] = "Planet View";
    var timerIndexc = 1;
    var buildingIndex = 1;
}

@if (TempData["Message"] != null)
{
    <p> @TempData["Message"] </p>
}

<h1>Planet @Model.Position - @Model.Type</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <span>Planet name: @Model.Name</span><br />
        <span>Position: @Model.Position</span><br />
        <span>Type @Model.Type</span><br />

        @if (Model.IsTerraformed)
        {
            foreach (var Factory in Model.Factories.OrderBy(f => f.Type))
            {
                <span>@Factory.Type ---> Level: @Factory.Level, Income -----> @Factory.Income, Upgrade Cost -----> @Factory.UpgradeCost Milky Coin and @(Factory.UpgradeCost / 10) Energy, Upgrade Time ------> @Factory.UpgradeTimeLength</span><br />
                @if (Model.PlayerId == UserManager.GetUserId(User))
                {
                    <form>
                        <input id="buildingId @buildingIndex" type="hidden" name="buildingId" value=@Factory.Id>
                        <input id="planetId" type="hidden" name="planetId" value=@Model.Id>
                        <div class="form-group">
                            <input id="input" onclick="initialUpgrade(@(buildingIndex++))" value="Level Up" class="btn btn-primary" />
                        </div>
                    </form>
                }
            }

            <span>Planet building space: (@Model.BuiltUpSpace/@Model.BuildingCap)</span>
        }
        else
        {
            <form asp-action="Terraform" method="post">
                <div class="form-group">
                    <input name="planetId" hidden value="@Model.Id" class="form-control" />
                </div>
                <div class="form-group">
                    <input type="submit" value="Terraform" class="btn btn-primary" />
                </div>
            </form>
        }
    </div>
</div>

<div id="timers">
</div>

@section Scripts {
    <script>
        window.onload = function () {
            if ('@Model.Factories.Any(f => f.UpgradeFinishTime.HasValue)' == 'True') {
                @foreach (var Factory in Model.Factories.Where(f => f.UpgradeFinishTime.HasValue))
                {
                    <text> upgrade('@Factory.UpgradeFinishTime.Value', '@Factory.Type.ToString()', @timerIndexc);</text>
                    timerIndexc++;
                }
            }
            else {
            }
        }

        function convertSeconds(s) {
            var min = Math.floor(s / 60);
            var sec = Math.floor(s % 60);
            if (min < 10) {
                min = '0' + min;
            }
            if (sec < 10) {
                sec = '0' + sec;
            }
            return min + ':' + sec;
        }

        function initialUpgrade(buildingIndex) {
            $(document).ready(function () {
                var buildingId = document.getElementById("buildingId " + buildingIndex).value;
                    var planetId = $("#planetId").val();
                    var datastring = "buildingId=" + buildingId + "&planetId=" + planetId;
                    $.ajax({
                        type: "post",
                        url: "StartUpgrade",
                        data: datastring,
                        success: function (response) {
                            setTimeout(function () { window.location.href = response.redirectToUrl; }, 200);
                        }
                    });
                });
        }

        function upgrade(UpgradeFinishTime, factoryType, timerIndex) {
            var counter = 0;
            var timeleft = 0;
            if (UpgradeFinishTime != '') {
                var oneSplit = UpgradeFinishTime.split(' ');
                var year = oneSplit[0].split('/')[2];
                var month = oneSplit[0].split('/')[1];
                var day = oneSplit[0].split('/')[0];
                var hour = oneSplit[1].split(':')[0];
                var minutes = oneSplit[1].split(':')[1];
                var seconds = oneSplit[1].split(':')[2];

                var upgradeDate = new Date(year, month - 1, day, hour, minutes, seconds);

                timeleft = (upgradeDate.getTime() - new Date().getTime()) / 1000;
            }

            if (timeleft > 0) {
                var newP = document.createElement("p");
                newP.id = 'timer' + timerIndex;
                var textNode = document.createTextNode(" This is a new text node");
                newP.appendChild(textNode);
                document.getElementById("timers").appendChild(newP);

                document.getElementById('timer' + timerIndex).innerText = factoryType + ' ' + convertSeconds(timeleft);
                var _tick = setInterval(function () {
                    counter++;
                    document.getElementById('timer' + timerIndex).innerText = factoryType + ' ' + convertSeconds(timeleft - counter);
                    if (counter >= timeleft) {
                        clearInterval(_tick);
                        setTimeout(function () { location.reload(); }, 1000);
                    }
                }, 1000);
            }
        }
    </script>
}
