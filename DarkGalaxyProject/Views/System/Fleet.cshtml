@using Microsoft.AspNetCore.Identity
@using DarkGalaxyProject.Models.System
@using DarkGalaxyProject.Data.Enums
@using System.Text
@model FleetViewFormModel
@inject UserManager<Player> UserManager

@{
    ViewData["Title"] = "Systems of the Dark Galaxy";
}

<h1>
    Fleet
</h1>

<ul>
    @foreach (var ship in Model.Ships.Where(s => !s.OnMission).ToList())
    {
        <li>
            <span>Type: @ship.Type,</span>
            <span>MaxHP: @ship.MaxHP,</span>
            <span>HP: @ship.HP,</span>
            <span>Damage: @ship.Damage,</span>
            <span>Speed: @ship.Speed,</span>
            <span>MaxStorage: @ship.MaxStorage,</span>
            <span>Storage: @ship.Storage</span>
        </li>
    }
</ul>

@if (Model.PlayerId == UserManager.GetUserId(User))
{
<form>
    <div class="form-group">
        <label asp-for="GoliathCount" class="control-label">Goliath</label>
        <input id="goliathCount" class="form-control" />
        <span asp-validation-for="GoliathCount" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="VengeanceCount" class="control-label">Vengeance</label>
        <input id="vengeanceCount" class="form-control" />
        <span asp-validation-for="VengeanceCount" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="LeonovCount" class="control-label">Leonov</label>
        <input id="leonovCount" class="form-control" />
        <span asp-validation-for="LeonovCount" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DestinationSystemPosition" class="control-label">Targeted system's position</label>
        <input id="destinationSystemPosition" class="form-control" />
        <span asp-validation-for="DestinationSystemPosition" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input id="systemId" hidden value=@Model.HostSystemId class="form-control" />
    </div>
    <div class="form-group">
        <input id="hostSystemPosition" hidden value=@Model.HostSystemPosition class="form-control" />
    </div>
    <div class="form-group">
        <input id="arrivalTime" hidden value=@Model.ArrivalTime class="form-control" />
    </div>
    <div class="form-group">
        <input id="departureTime" hidden value=@Model.DepartureTime class="form-control" />
    </div>
    <div class="form-group">
        <input id="outgoing" hidden value=@Model.Outgoing class="form-control" />
    </div>
    <div class="form-group">
        <label for"colonize">Colonize</label>
        <input type="checkbox" id="colonize" value=@Model.Colonizer class="form-control" />
    </div>
    <div class="form-group">
        <input value="Send" onclick="SendFleet()" class="btn btn-primary" />
    </div>
    <p id="timer"></p>
    @if (Model.ArrivalTime.HasValue)
    {
        if (Model.Outgoing)
        {
            <p>Outgoing</p>
        }
        else
        {
            <p>Incoming</p>
        }
    }
</form>
}

@section Scripts {
    <script>
        window.onload = function () {
            if ('@Model.ArrivalTime.HasValue' == 'True') {
                moveTheFleet();
            }
            else {
            }
        }
        //If i refresh the page though the time would still disappear and nothing will happen when the UpgradeTime == Date.now()
        //I need another function activating on page load checking if the property UpgradeTime is not null
        function convertSeconds(s) {
            var min = Math.floor(s / 60);
            var sec = Math.floor(s % 60);
            if (min < 10) {
                min = '0' + min;
            }
            if (sec < 10) {
                sec = '0' + sec;
            }
            return min + ':' + sec;
        }
        var ArrivalTime = '@(Model.ArrivalTime.HasValue ? Model.ArrivalTime.Value : null)';
        var departureTime = '@(Model.DepartureTime.HasValue ? Model.DepartureTime.Value : null)';

        function SendFleet() {
            if (ArrivalTime == '') {
                $(document).ready(function () {
                    var goliathCount = $("#goliathCount").val();
                    var vengeanceCount = $("#vengeanceCount").val();
                    var leonovCount = $("#leonovCount").val();
                    var colonizer = false;
                    if ($("#colonize").is(":checked")) {
                        colonizer = true;
                    }
                    var destinationSystemPosition = $("#destinationSystemPosition").val();
                    console.log(colonizer);
                    var systemId = $("#systemId").val();
                    var datastring = "goliathCount=" + goliathCount + "&vengeanceCount=" + vengeanceCount + "&leonovCount=" + leonovCount + "&colonizer=" + colonizer + "&destinationSystemPosition=" + destinationSystemPosition + "&systemId=" + systemId;
                    $.ajax({
                        type: "post",
                        url: "SendFleet", 
                        data: datastring 
                    });
                    setTimeout(function () { location.reload(); }, 200);
                });
            }
        }

        function moveTheFleet() {
            var counter = 0;
            var timeleft = 0;
                var oneSplit = ArrivalTime.split(' ');
                var year = oneSplit[0].split('/')[2];
                var month = oneSplit[0].split('/')[1];
                var day = oneSplit[0].split('/')[0];
                var hour = oneSplit[1].split(':')[0];
                var minutes = oneSplit[1].split(':')[1];
                var seconds = oneSplit[1].split(':')[2];

                var arrivalDate = new Date(year, month - 1, day, hour, minutes, seconds);

               timeleft = (arrivalDate.getTime() - new Date().getTime()) / 1000;


            if (timeleft - counter > 0) {
                document.getElementById('timer').innerText = convertSeconds(timeleft);
                var _tick = setInterval(function () {
                    counter++;
                    document.getElementById('timer').innerText = convertSeconds(timeleft - counter);
                    if (timeleft - counter <= 0) {
                        console.log('am I here?');
                        clearInterval(_tick);
                        if ('@(Model.Outgoing)' === '@true') {
                            //method  chaning outgoing to false and setting the new arrival and departure times
                            fleetReturn();
                        } else {
                            fleetBoarding();
                        }
                        setTimeout(function () { location.reload(); }, 200);
                    }
                }, 1000);
            } else  { //|| ArrivalTime != '' || departureTime != ''
                if ('@(Model.Outgoing)' == 'True') {
                    fleetReturn();//method  changing outgoing to false
                } else {
                    fleetBoarding();
                }
                setTimeout(function () { location.reload(); }, 200);
            }

            function fleetReturn() {
                $(document).ready(function () {
                    var systemId = $("#systemId").val();
                    var datastring = "systemId=" + systemId;
                    $.ajax({
                        type: "post",
                        url: "FleetReturn",
                        data: datastring
                    });
                });
            }

            function fleetBoarding() {
                $(document).ready(function () {
                    var systemId = $("#systemId").val();
                    var datastring = "systemId=" + systemId;
                    $.ajax({
                        type: "post",
                        url: "FleetBoarding",
                        data: datastring
                    });
                });
            }
        }
    </script>
}