@using Microsoft.AspNetCore.Identity
@using DarkGalaxyProject.Models.System
@using DarkGalaxyProject.Data.Enums
@using System.Text
@model FleetViewFormModel
@inject UserManager<Player> UserManager

@{
    ViewData["Title"] = "Systems of the Dark Galaxy";
    var timerIndexc = 1;
    var BattleShip = Model.Ships.FirstOrDefault(s => s.Type == ShipType.BattleShip.ToString());
    var TransportShip = Model.Ships.FirstOrDefault(s => s.Type == ShipType.TransportShip.ToString());
    var Espionage = Model.Ships.FirstOrDefault(s => s.Type == ShipType.Espionage.ToString());
    var Colonizer = Model.Ships.FirstOrDefault(s => s.Type == ShipType.Colonizer.ToString());
}

@if (TempData["Message"] != null)
{
    <p> @TempData["Message"] </p>
}

<h1>
    Fleet
</h1>

<ul>
    @foreach (var ship in Model.Ships.Where(s => !s.OnMission && s.DealId == null && s.FleetId == null).GroupBy(s => s.Type).ToList())
    {
    <li>
        <span>Type: @ship.First().Type,</span>
        <span>MaxHP: @ship.Sum(s => s.MaxHP),</span>
        <span>HP: @ship.Sum(s => s.HP),</span>
        <span>Damage: @ship.Sum(s => s.Damage),</span>
        <span>MaxStorage: @ship.Sum(s => s.MaxStorage),</span>
        <span>Storage: @ship.Sum(s => s.Storage),</span>
        <span>Count: @ship.Count()</span>
    </li>
    }
</ul>

@if (Model.HostSystemInfo.PlayerId == UserManager.GetUserId(User))
{
<div class="displayInline">
    <form>
        <div class="form-group control-label">
            <label asp-for="BattleShipCount" class="control-label">Battle ship</label>
            <input id="battleShipCount" oninput="showFuelPrice()" class="form-control small-input" size="4" />
            <span asp-validation-for="BattleShipCount" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="TransportShipCount" class="control-label">Transport ship</label>
            <input id="transportShipCount" oninput="showFuelPrice()" class="form-control small-input" size="4" />
            <span asp-validation-for="TransportShipCount" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ColonizerCount" class="control-label">Colonizer</label>
            <input id="colonizerCount" oninput="showFuelPrice()" class="form-control small-input" />
            <span asp-validation-for="ColonizerCount" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="DestinationSystemPosition" class="control-label">Targeted system's position</label>
            <input id="destinationSystemPosition" oninput="showFuelPrice()" class="form-control small-input" />
            <span asp-validation-for="DestinationSystemPosition" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Cargo" class="control-label">Cargo</label>
            <input id="cargo" oninput="showFuelPrice()" class="form-control small-input" />
            <span asp-validation-for="Cargo" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input id="systemId" hidden value=@Model.HostSystemInfo.HostSystemId class="form-control" />
        </div>
        <div class="form-group">
            <input id="hostSystemPosition" hidden value=@Model.HostSystemInfo.HostSystemPosition class="form-control" />
        </div>
        <div class="form-group">
            <select id="missionType" onchange="showFuelPrice()" class="form-control" asp-items="Html.GetEnumSelectList<MissionType>()"></select>
        </div>
        <div class="form-group">
            <input value="Send" onclick="SendFleet()" class="btn btn-primary" />
        </div>
        <div id="timers">
        </div>
    </form>
</div>

    <p id="totalFuelPrice"></p>

    <form asp-action="AddFleet" method="post">
        <div class="form-group">
            <input name="systemId" hidden value="@Model.HostSystemInfo.HostSystemId" class="form-control" />
        </div>
        <div class="form-group">
            <input type="submit" value="Add Fleet" class="btn btn-primary" />
        </div>
    </form>
}

@section Scripts {
    <script>
        var BattleShipFuelExpense = @(BattleShip == null ? 0 : BattleShip.FuelExpense)
        var TransportShipFuelExpense = @(TransportShip == null ? 0 : TransportShip.FuelExpense)
        var EspionageFuelExpense = @(Espionage == null ? 0 : Espionage.FuelExpense)
        var ColonizerFuelExpense = @(Colonizer == null ? 0 : Colonizer.FuelExpense)

        window.onload = function () {
            if ('@Model.Fleets.Any(f => f.ArrivalTime.HasValue)' == 'True') { //Model.Fleets.Any(ArrivaTime.HasValue)
                @foreach (var fleet in Model.Fleets.Where(f => f.ArrivalTime.HasValue))
                {
                    <text> moveTheFleet('@fleet.ArrivalTime.Value', '@fleet.Outgoing' == 'True', @timerIndexc);</text>
                    timerIndexc++;
                }
            }
            else {
            }
        }

        function convertSeconds(s) {
            var min = Math.floor(s / 60);
            var sec = Math.floor(s % 60);
            if (min < 10) {
                min = '0' + min;
            }
            if (sec < 10) {
                sec = '0' + sec;
            }
            return min + ':' + sec;
        }

        function SendFleet() {
                $(document).ready(function () {
                    var battleShipCount = $("#battleShipCount").val();
                    var colonizerCount = $("#colonizerCount").val();
                    var transportShipCount = $("#transportShipCount").val();
                    var missionType = $("#missionType").val();
                    var destinationSystemPosition = $("#destinationSystemPosition").val();
                    var cargo = $("#cargo").val();
                    var systemId = $("#systemId").val();
                    var datastring = "battleShipCount=" + battleShipCount + "&colonizerCount=" + colonizerCount + "&transportShipCount=" + transportShipCount + "&missionType=" + missionType + "&destinationSystemPosition=" + destinationSystemPosition + "&systemId=" + systemId + "&cargo=" + cargo;
                    $.ajax({
                        type: "post",
                        url: "SendFleet",
                        data: datastring,
                        success: function (response) {
                            setTimeout(function () { window.location.href = response.redirectToUrl; }, 200);
                        }
                    })
                });
        }

        function moveTheFleet(ArrivalTime, outgoing, timerIndex) {
            var counter = 0;
            var timeleft = 0;
                var oneSplit = ArrivalTime.split(' ');
                var year = oneSplit[0].split('/')[2];
                var month = oneSplit[0].split('/')[1];
                var day = oneSplit[0].split('/')[0];
                var hour = oneSplit[1].split(':')[0];
                var minutes = oneSplit[1].split(':')[1];
                var seconds = oneSplit[1].split(':')[2];

                var arrivalDate = new Date(year, month - 1, day, hour, minutes, seconds);

               timeleft = (arrivalDate.getTime() - new Date().getTime()) / 1000;


            if (timeleft > 0) { //deleted - counter because counter would always be 0 right?
                var newP = document.createElement("p");
                newP.id = 'timer' + timerIndex;
                var textNode = document.createTextNode(" This is a new text node");
                newP.appendChild(textNode);
                document.getElementById("timers").appendChild(newP);
                var movementType = 'Incoming';
                if (outgoing) {
                    movementType = 'Outgoing'
                }

                document.getElementById('timer' + timerIndex).innerText = movementType + convertSeconds(timeleft);
                var _tick = setInterval(function () {
                    counter++;
                    document.getElementById('timer' + timerIndex).innerText = movementType + convertSeconds(timeleft - counter);
                    if (timeleft - counter <= 0) {
                        clearInterval(_tick);
                        setTimeout(function () { location.reload(); }, 2000);
                    }
                }, 1000);
            }
        }

        function showFuelPrice() {
            var destinationSystemPosition = document.getElementById('destinationSystemPosition').value;
            var hostSystemPosition = document.getElementById('hostSystemPosition').value;
            var missionType = document.getElementById('missionType').value;
            var battleShipCount = document.getElementById('battleShipCount').value;
            var transportShipCount = document.getElementById('transportShipCount').value;
            var colonizerCount = document.getElementById('colonizerCount').value;

            var fuelPrice = (battleShipCount * BattleShipFuelExpense) + (transportShipCount * TransportShipFuelExpense) + (colonizerCount * ColonizerFuelExpense);

            if (missionType == 5) {
                fuelPrice = EspionageFuelExpense;
            }
            else if (missionType == 4 && colonizerCount == 0) {
                fuelPrice += ColonizerFuelExpense;
            }

            var totalFuelCost = Math.abs(hostSystemPosition - destinationSystemPosition) * fuelPrice;

            document.getElementById('totalFuelPrice').innerHTML = 'Total fuel needed for this mission: ' + totalFuelCost;
        }

    </script>
}