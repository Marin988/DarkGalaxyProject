// <auto-generated />
using System;
using DarkGalaxyProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DarkGalaxyProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.BaseModels.Alliance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeaderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Alliances");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.BaseModels.DefensiveStructure", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("SystemId");

                    b.ToTable("DefensiveStructures");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.BaseModels.Planet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Planet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Research", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResearchBuildingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ResearchBuildingId");

                    b.ToTable("Research");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.ResearchTree", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BattleShips")
                        .HasColumnType("bit");

                    b.Property<bool>("Discovery")
                        .HasColumnType("bit");

                    b.Property<bool>("EnergyBarriers")
                        .HasColumnType("bit");

                    b.Property<bool>("FuelOptimization")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ReadyForBattle")
                        .HasColumnType("bit");

                    b.Property<bool>("Shields")
                        .HasColumnType("bit");

                    b.Property<bool>("SpaceCascades")
                        .HasColumnType("bit");

                    b.Property<bool>("SpaceMonster")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("ResearchTrees");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Technology", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("KnowledgeCost")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.System", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnergyPlanetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PopulatedPlanetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ResearchPlanetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourcePlanetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("EnergyPlanetId")
                        .IsUnique()
                        .HasFilter("[EnergyPlanetId] IS NOT NULL");

                    b.HasIndex("PopulatedPlanetId")
                        .IsUnique()
                        .HasFilter("[PopulatedPlanetId] IS NOT NULL");

                    b.HasIndex("ResearchPlanetId")
                        .IsUnique()
                        .HasFilter("[ResearchPlanetId] IS NOT NULL");

                    b.HasIndex("ResourcePlanetId")
                        .IsUnique()
                        .HasFilter("[ResourcePlanetId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.BlackHole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("BlackHoles");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.Amenity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PlanetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId")
                        .IsUnique();

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.LivingQuarters", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PlanetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId")
                        .IsUnique();

                    b.ToTable("LivingQuarters");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResearchBuilding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ResearchBuildings");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PlanetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("ResourceBuildings");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.StorageBuilding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PlanetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("StorageBuildings");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Debris", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SizeType")
                        .HasColumnType("int");

                    b.Property<int>("Timer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Debrises");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlackHoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebrisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("BlackHoleId");

                    b.HasIndex("DebrisId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SystemId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Ship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SystemId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Sun", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("Suns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.EnergyPlanet", b =>
                {
                    b.HasBaseType("DarkGalaxyProject.Data.Models.BaseModels.Planet");

                    b.Property<string>("FuelToEnergyCenterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeothermalPlantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SolarPanelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FuelToEnergyCenterId");

                    b.HasIndex("GeothermalPlantId");

                    b.HasIndex("SolarPanelId");

                    b.HasDiscriminator().HasValue("EnergyPlanet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.PopulatedPlanet", b =>
                {
                    b.HasBaseType("DarkGalaxyProject.Data.Models.BaseModels.Planet");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PopulatedPlanet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResearchPlanet", b =>
                {
                    b.HasBaseType("DarkGalaxyProject.Data.Models.BaseModels.Planet");

                    b.Property<string>("ResearchBuildingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ResearchBuildingId");

                    b.HasDiscriminator().HasValue("ResearchPlanet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResourcePlanet", b =>
                {
                    b.HasBaseType("DarkGalaxyProject.Data.Models.BaseModels.Planet");

                    b.Property<string>("CrystalMineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CrystalStorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelGeneratorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelStorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitaniumMineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TitaniumStorageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CrystalMineId");

                    b.HasIndex("CrystalStorageId");

                    b.HasIndex("FuelGeneratorId");

                    b.HasIndex("FuelStorageId");

                    b.HasIndex("TitaniumMineId");

                    b.HasIndex("TitaniumStorageId");

                    b.HasDiscriminator().HasValue("ResourcePlanet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AllianceCandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceLeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllianceLeadersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AllianceCandidateId");

                    b.HasIndex("AllianceId");

                    b.HasIndex("AllianceLeaderId")
                        .IsUnique()
                        .HasFilter("[AllianceLeaderId] IS NOT NULL");

                    b.HasIndex("AllianceLeadersId");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.BaseModels.DefensiveStructure", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "Alliance")
                        .WithMany()
                        .HasForeignKey("AllianceId");

                    b.HasOne("DarkGalaxyProject.Data.Models.System", "System")
                        .WithMany("DefensiveStructures")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.ChatMessage", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "Alliance")
                        .WithMany("Messages")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Message", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Research", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Player")
                        .WithMany("Researches")
                        .HasForeignKey("PlayerId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResearchBuilding", null)
                        .WithMany("Researches")
                        .HasForeignKey("ResearchBuildingId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.ResearchTree", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Player")
                        .WithOne("ResearchTree")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.Others.ResearchTree", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Others.Technology", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.Player", null)
                        .WithMany("Technologies")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.System", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "Alliance")
                        .WithMany("Systems")
                        .HasForeignKey("AllianceId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.EnergyPlanet", "EnergyPlanet")
                        .WithOne("System")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.System", "EnergyPlanetId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.PopulatedPlanet", "PopulatedPlanet")
                        .WithOne("System")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.System", "PopulatedPlanetId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResearchPlanet", "ResearchPlanet")
                        .WithOne("System")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.System", "ResearchPlanetId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResourcePlanet", "ResourcePlanet")
                        .WithOne("System")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.System", "ResourcePlanetId");

                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "User")
                        .WithMany("Systems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Alliance");

                    b.Navigation("EnergyPlanet");

                    b.Navigation("PopulatedPlanet");

                    b.Navigation("ResearchPlanet");

                    b.Navigation("ResourcePlanet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.BlackHole", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.System", "System")
                        .WithMany("BlackHoles")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.Amenity", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.PopulatedPlanet", "Planet")
                        .WithOne("Amenities")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.Amenity", "PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.LivingQuarters", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Planets.PopulatedPlanet", "Planet")
                        .WithOne("LivingQuarters")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.LivingQuarters", "PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.StorageBuilding", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Resource", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", null)
                        .WithMany("Resources")
                        .HasForeignKey("AllianceId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.BlackHole", null)
                        .WithMany("Resources")
                        .HasForeignKey("BlackHoleId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Debris", null)
                        .WithMany("Resources")
                        .HasForeignKey("DebrisId");

                    b.HasOne("DarkGalaxyProject.Data.Models.Player", null)
                        .WithMany("Resources")
                        .HasForeignKey("PlayerId");

                    b.HasOne("DarkGalaxyProject.Data.Models.System", null)
                        .WithMany("Resources")
                        .HasForeignKey("SystemId");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Ship", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "Alliance")
                        .WithMany("Ships")
                        .HasForeignKey("AllianceId");

                    b.HasOne("DarkGalaxyProject.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("DarkGalaxyProject.Data.Models.System", "System")
                        .WithMany("Ships")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");

                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Sun", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.System", "System")
                        .WithMany("Suns")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.EnergyPlanet", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "FuelToEnergyCenter")
                        .WithMany()
                        .HasForeignKey("FuelToEnergyCenterId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "GeothermalPlant")
                        .WithMany()
                        .HasForeignKey("GeothermalPlantId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "SolarPanel")
                        .WithMany()
                        .HasForeignKey("SolarPanelId");

                    b.Navigation("FuelToEnergyCenter");

                    b.Navigation("GeothermalPlant");

                    b.Navigation("SolarPanel");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResearchPlanet", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResearchBuilding", "ResearchBuilding")
                        .WithMany()
                        .HasForeignKey("ResearchBuildingId");

                    b.Navigation("ResearchBuilding");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResourcePlanet", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "CrystalMine")
                        .WithMany()
                        .HasForeignKey("CrystalMineId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.StorageBuilding", "CrystalStorage")
                        .WithMany()
                        .HasForeignKey("CrystalStorageId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "FuelGenerator")
                        .WithMany()
                        .HasForeignKey("FuelGeneratorId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.StorageBuilding", "FuelStorage")
                        .WithMany()
                        .HasForeignKey("FuelStorageId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResourceBuilding", "TitaniumMine")
                        .WithMany()
                        .HasForeignKey("TitaniumMineId");

                    b.HasOne("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.StorageBuilding", "TitaniumStorage")
                        .WithMany()
                        .HasForeignKey("TitaniumStorageId");

                    b.Navigation("CrystalMine");

                    b.Navigation("CrystalStorage");

                    b.Navigation("FuelGenerator");

                    b.Navigation("FuelStorage");

                    b.Navigation("TitaniumMine");

                    b.Navigation("TitaniumStorage");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Player", b =>
                {
                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "AllianceCandidate")
                        .WithMany("Candidates")
                        .HasForeignKey("AllianceCandidateId");

                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "AllianceLeader")
                        .WithOne("Leader")
                        .HasForeignKey("DarkGalaxyProject.Data.Models.Player", "AllianceLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DarkGalaxyProject.Data.Models.BaseModels.Alliance", "AllianceLeaders")
                        .WithMany("Leaders")
                        .HasForeignKey("AllianceLeadersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Alliance");

                    b.Navigation("AllianceCandidate");

                    b.Navigation("AllianceLeader");

                    b.Navigation("AllianceLeaders");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.BaseModels.Alliance", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Leader");

                    b.Navigation("Leaders");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Resources");

                    b.Navigation("Ships");

                    b.Navigation("Systems");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.System", b =>
                {
                    b.Navigation("BlackHoles");

                    b.Navigation("DefensiveStructures");

                    b.Navigation("Resources");

                    b.Navigation("Ships");

                    b.Navigation("Suns");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.BlackHole", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Buildings.ResearchBuilding", b =>
                {
                    b.Navigation("Researches");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Debris", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.EnergyPlanet", b =>
                {
                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.PopulatedPlanet", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("LivingQuarters");

                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResearchPlanet", b =>
                {
                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.WithinSystem.Planets.ResourcePlanet", b =>
                {
                    b.Navigation("System");
                });

            modelBuilder.Entity("DarkGalaxyProject.Data.Models.Player", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("Researches");

                    b.Navigation("ResearchTree");

                    b.Navigation("Resources");

                    b.Navigation("SentMessages");

                    b.Navigation("Systems");

                    b.Navigation("Technologies");
                });
#pragma warning restore 612, 618
        }
    }
}
